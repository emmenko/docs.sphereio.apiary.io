FORMAT: 1A
HOST: https://api-v0.sphere.io/

# SPHERE.IO HTTP API Documentation
The HTTP API of SPHERE.IO provides an interface for programmatic access to the data stored on SPHERE.IO and the associated functionality. While it can be used directly, for experimentation or custom integration solutions, we recommend taking a look at our available client libraries and SDKs, which usually provide a more comfortable development experience.

This document gives an overview of the characteristics and common features of the API.

## Hosts
The **HTTP API** for projects on SPHERE.IO is currently provided at the following URL that is assumed to be prepended to all endpoints in the specific APIs:

`https://api-v0.sphere.io/`

The **OAuth2 APIs** are currently provided at the following URL:

`https://auth-v0.sphere.io/`

## JSON
The majority of the services consume and produce standard `application/json` payloads for the time being. Consumers of JSON responses should ignore any unrecognized fields encountered in JSON objects of responses, or deal with them in a way that does not cause the client application to crash. The services will assume clients behave properly in that manner and thus consider the addition of new fields to be backwards-compatible with respect to existing clients. Clients should also not rely on the presence of undocumented fields. Fields that are returned by a service but are not documented can be renamed or disappear at any time without prior notice.

## Optimistic Concurrency Control
Many resources exposed on the API employ optimistic concurrency control to prevent lost updates when making changes to existing data concurrently. Such resources carry around a `version`. When sending (partial) updates to such resources, the expected version of a resource needs to be a part in the representation sent with the request. Usually the HTTP answer contains the new version of the resource which can increase by 1 or more due to internal calculations.

Note that the current API deliberately does not use `ETag` + `If-Match` headers for the purpose of optimistic concurrency control. Future versions of the API may support `ETag`s together with `If-None-Match` headers for the purpose of reducing network traffic.

## Query Features
Common query features include filtering, sorting, paging and reference expansion. Certain aspects of these features are standardized across all parts of the API as described in the following sections.

# Group Authorization
#### OAuth2
API authorization uses [OAuth2 bearer tokens](http://tools.ietf.org/html/rfc6750).

Clients must obtain an `access_token` from the *auth service* using one of the authorization flows described below, before they are able to make authorized requests to other SPHERE.IO services.
On successful completion of an authorization flow, a client will be given an `access_token`, which they need to include in requests to authorized service endpoints via the **HTTP Authorization header** like this:

`Authorization: Bearer {access_token}`

The `access_token` has a lifetime (in seconds) determined by the parameter `expires_in`.

#### Authorization Flows
Here are listed all currently supported authorization flows:

## Client Credentials Flow [/oauth/token{?grant_type,scope}]
To obtain an access token through the client credentials flow, simply issue the following request to the auth service, providing your `client_id` and `client_secret` via [HTTP Basic Authentication](http://en.wikipedia.org/wiki/Basic_access_authentication),
where the username is the `client_id` and the password is the `client_secret`.

#### Scopes

All access tokens are constrained to a certain scope. The currently supported scopes are described here.

**Project Scopes**

The project scopes provide API access in the context of a specific project.
Your client can only acquire those scopes which have been previously granted by a sufficiently authorized user through the SPHERE.IO [Merchant Center](https://admin.sphere.io/).

- `manage_project:{projectKey}`
Grants full access to the APIs for the specified project.
- `manage_products:{projectKey}`
Grants access to the APIs for creating, modifying and viewing anything related to products in a project. Implies view_products for the same project.
- `view_products:{projectKey}`
Grants access to the APIs for viewing anything related to products in a project.
- `manage_orders:{projectKey}`
Grants access to the APIs for creating, modifying and viewing anything related to orders in a project. Implies view_orders for the same project.
- `view_orders:{projectKey}`
Grants access to the APIs for viewing anything related to orders in a project.
- `manage_customers:{projectKey}`
Grants access to the APIs for creating, modifying and viewing anything related to customers in a project. Implies view_customers for the same project.
- `view_customers:{projectKey}`
Grants access to the APIs for viewing anything related to customers in a project.

+ Parameters
    + grant_type (required, string, `client_credentials`) ... The type defined for this authorization flow `client_credentials`.
    + scope (required, string, `scope=manage_project:{projectKey}`) ... The scope to grant access to API resources.

### Obtain an access token [POST]
+ Request

    + Headers

            Authorization: Basic <BASE64-ENCODED-STRING>

+ Response 200 (application/json)

        {
            "access_token": "vkFuQ6oTwj8_Ye4eiRSsqMeqLYNeQRJi",
            "token_type": "Bearer",
            "expires_in": 172800, // 2 days
            "scope": "manage_project:{projectKey}"
        }

# Group API Types

## <a name="localized-string"></a> Localized String
A `LocalizedString` is a JSON object where the keys are ISO language tags, and the values the corresponding strings used for that language.

```json
{
    "de": "Hundefutter",
    "en": "dog food"
}
```

## <a name="reference"></a> Reference
A `Reference` is a JSON object representing a (loose) reference to another resource on SPHERE.IO platform. It consists of two fields:

- `typeId` ( **String** )
The typeId designates the type of the referenced resource (see the list of reference types below).
- `id` ( **String** )
The unique ID of the referenced resource.

```json
{
    "mostWanted": {
        "typeId": "product",
        "id": "d1229e6f-2b79-441e-b419-180311e52754"
    }
}
```

**Reference Types**

- `product` - Identifies a reference to a [Product](#product).
- `product-type` - Identifies a reference to a [ProductType](#product-type).
- `category` - Identifies a reference to a [Category](#category).
- `tax-category` - Identifies a reference to a [TaxCategory](#tax-category).
- `customer` - Identifies a reference to a [Customer](#customer).
- `customer-group` - Identifies a reference to a [CustomerGroup](#customer-group).
- `cart` - Identifies a reference to a [Cart](#cart).
- `order` - Identifies a reference to an [Order](#order).
- `user` - Identifies a reference to a user.

## <a name="money"></a> Money
A `Money` is a JSON object combining a currency and an amount (in cents). It consists of two fields:

- `currencyCode` ( **String** )
The ISO 4217 currency code.
- `centAmount` ( **Number** )
The amount in cents (the smallest indivisible unit of the currency).

```json
{
    "monthlyFee": {
        "currencyCode": "EUR",
        "centAmount":4200
    }
}
```

## <a name="date"></a> Date
A `Date` is a JSON string representation of a date without timezone in ISO 8601 format (YYYY-MM-DD), for example:

```json
{
    "someDate": "2001-09-11"
}
```

## <a name="time"></a> Time
A `Time` is a JSON string representation of a time without timezone in ISO 8601 format (hh:mm:ss.sss), for example:

```json
{
    "someTime": "14:00:00.000"
}
```

## <a name="date-time"></a> DateTime
A `DateTime` is a JSON string representation of UTC date & time in ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ), for example:

```json
{
    "someDateTime": "2001-09-11T14:00:00.000Z"
}
```

## <a name="address"></a> Address
An `Address` is a JSON string representation of a postal address. It consists of the following fields:

- `id` ( **String**, *optional* )
- `title` ( **String**, *optional* )
- `salutation` ( **String**, *optional* )
- `firstName` ( **String**, *optional* )
- `lastName` ( **String**, *optional* )
- `streetName` ( **String**, *optional* )
- `streetNumber` ( **String**, *optional* )
- `additionalStreetInfo` ( **String**, *optional* )
- `postalCode` ( **String**, *optional* )
- `city` ( **String**, *optional* )
- `region` ( **String**, *optional* )
- `state` ( **String**, *optional* )
- `country` ( **String** )
A two-digit country code as per [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
- `company` ( **String**, *optional* )
- `department` ( **String**, *optional* )
- `building` ( **String**, *optional* )
- `apartment` ( **String**, *optional* )
- `pOBox` ( **String**, *optional* )
- `phone` ( **String**, *optional* )
- `mobile` ( **String**, *optional* )
- `email` ( **String**, *optional* )

# Group Category Resources
Categories are used to organize products in a hierarchical structure.

## Category [/{projectKey}/categories/{id}{?version}]
#### <a name="category"></a> Representation
- `id` ( **String**, *required* )
The unique ID of the category.
- `version` ( **Number**, *required* )
The current version of the category.
- `name` ( [**LocalizedString**](#localized-string), *required* )
- `slug` ( [**LocalizedString**](#localized-string), *required* ) - must match the pattern `[-a-zA-Z0-9_]{2,64}`
- `description` ( [**LocalizedString**](#localized-string), *optional* )
- `ancestors` ( **Array** of [Reference](#reference) to a [Category](#category), *optional* )
- `parent` ( [Reference](#reference) to a [Category](#category), *optional* )
- `orderHint` ( **String**, *optional* )
An attribute as base for a custom category order in one level.

#### Single Resource Query Response
Query responses for single resources only return a single, top-level JSON object.

+ Parameters
    + projectKey (required, string, `my-project`) ... The `key` of your project.
    + id (required, string, `123456`) ... The unique `id` of the category.

+ Model (application/json)

        {
            "id": "some_123_id",
            "version": 1,
            "name": {
                "en": "myCategory"
            },
            "slug": {
                "en": "my-cat-<random>"
            },
            "orderHint": "0.275",
            "ancestors": []
        }

### Get Category by ID [GET]
#### Info
OAuth2 Scopes: `view_products:{projectKey}`

+ Request

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/json)

    [Category][]

### Update a Category [POST]
#### Info
OAuth2 Scopes: `manage_products:{projectKey}`

Fields:

- `version` ( **Number**, *required* )
The expected version of the category on which the changes should be applied. If the expected version does not match the actual version, a 409 Conflict will be returned.
- `actions` ( **Array** of [UpdateAction](#update-actions), *required* )
The list of update actions to be performed on the category.

#### <a name="update-actions"></a> Update actions
- **Change Name**
        - `action` ( **String**, `changeName` )
        - `name` ( [**LocalizedString**](#localized-string), *required* )

- **Change Slug**
        - `action` ( **String**, `changeSlug` )
        - `slug` ( [**LocalizedString**](#localized-string), *required* )

- **Set Description**
        - `action` ( **String**, `setDescription` )
        - `description` ( [**LocalizedString**](#localized-string), *required* )

- **Change Parent**
        - `action` ( **String**, `changeParent` )
        - `parent` ( [**Reference**](#reference) to a [Category](#category), *required* )

- **Change Order Hint**
        - `action` ( **String**, `changeOrderHint` )
        - `parent` ( **String**, *required* )

+ Request (application/json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

    + Body

            {
                "version": 1,
                "actions": [
                    {
                        "action": "changeName",
                        "name": {
                            "en": "New Name"
                        }
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "version": 2,
            "name": {
                "en": "New Name"
            },
            "slug": {
                "en": "my-cat-<random>"
            },
            "orderHint": "0.275",
            "ancestors": []
        }

### Delete a Category [DELETE]
#### Info
OAuth2 Scopes: `manage_products:{projectKey}`

+ Parameters
    + projectKey (required, string, `my-project`) ... The `key` of your project.
    + id (required, string, `123456`) ... The unique `id` of the category.
    + version (required, string, `version=4`) ... The `version` of the category you want to delete.

+ Request

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/json)

        {
            "version": 4,
            "name": {
                "en": "New Name"
            },
            "slug": {
                "en": "xyz-slug"
            },
            "orderHint": "0.455",
            "ancestors": []
        }

## Categories [/{projectKey}/categories{?where,sort,limit,offset}]
#### Paged Query Response
For query responses of requests supporting paging via `limit` and `offset`, the following common top-level fields are returned:

- `offset` ( **Number** )
The offset supplied by the client or the server default.
- `count` ( **Number** )
The actual number of results returned.
- `total` ( **Number** )
The total number of results matching the query.
- `results` ( **Number** )
 Array of [Category](#category) results

+ Parameters
    + projectKey (required, string, `my-project`) ... The `key` of your project.
    + where (optional, predicate, `name%28en%3D%22myCategory%22%29`) ... A `UTF-8` *URL encoded* [Predicate](#predicate).
    + sort (optional, string, `sort=name+desc`) ... A valid [Sort](#sort) expression, default value is `ASC`.
    + limit (optional, number, `limit=1`) ... The maximum number of results to return, default limit is `100`. A limit of `0` returns all results.

+ Model (application/json)

        {
            "count": 1,
            "offset": 0,
            "total": 1,
            "results": [
                {
                    "id": "some_123_id",
                    "version": 1,
                    "name": {
                        "en": "myCategory"
                    },
                    "slug": {
                        "en": "my-cat-<random>"
                    },
                    "orderHint": "0.275",
                    "ancestors": []
                }
            ]
        }

### Query Categories [GET]
#### Info
OAuth2 Scopes: `view_products:{projectKey}`

+ Request

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/json)

    [Categories][]
